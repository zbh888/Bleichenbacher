from Crypto.Util.number import getPrime
import base64


def int_to_bytes(n):
    return n.to_bytes((n.bit_length() + 7) // 8, 'big')

def bytes_to_int(bytes):
    return int.from_bytes(bytes, 'big')

def gcd(a, b):
    while b != 0:
        a, b = b, a % b

    return a


def lcm(a, b):
    return a // gcd(a, b) * b


def mod_inv(a, n):
    t, r = 0, n
    new_t, new_r = 1, a

    while new_r != 0:
        quotient = r // new_r
        t, new_t = new_t, t - quotient * new_t
        r, new_r = new_r, r - quotient * new_r

    if r > 1:
        raise Exception("a is not invertible")
    if t < 0:
        t = t + n

    return t


class RSA:

    def __init__(self, key_length):
        self.e = 65537
        phi = 0

        while gcd(self.e, phi) != 1:
            p, q = getPrime(key_length // 2), getPrime(key_length // 2)
            phi = lcm(p - 1, q - 1)
            self.n = p * q

        self._d = mod_inv(self.e, phi)

    def encrypt(self, binary_data):
        int_data = int.from_bytes(binary_data, byteorder='big')
        return pow(int_data, self.e, self.n)

    def decrypt(self, encrypted_int_data):
        int_data = pow(encrypted_int_data, self._d, self.n)
        return int_to_bytes(int_data)

d=b'KNEmUTIx04x+zBGHR/SGRE++85hsjjJ1Sm1OeFtM2A4cjuh3E0I+x3nMvRrWTLdQe2CJhkdescNt95TUcbK4872XB1CvNt1vtXsbanKTu2GZQuNDxx/HnZaHYD2DlR8zF5O/G++4pSeUdMNj2Tjqt+4BvRoWLmMz1gnOxwwNbMU='

d=bytes_to_int(base64.b64decode(d))

#c=9266790343419877076685539994100058400015766149030951911297927914058710966408325226121195833759714232973369913047647538934494865852230054701674017330613322091966680462433376218703543837164536291090531012802030479385405132331057140721644059243566174761090288577204740199495778650979577014226232529373725740244

c=71469336919058028344454859910317670791446579263094421326326095788071762618423398554527014741891751254360840213227136854615123550557369983860980804850638893269097361300089461937241118531932951613802854903094384670692170497062108380921965522119102497136961925661529309222523023603761434333669473369490778527534

e=65537

#n=82692866563358299105771538170966683220708562084713238591684240324139281596398790479747127605053810495320107075046288610891996531285778098665032385237724858850148250038473007644228102519434872444490059200379509332788992502067381657534435303236951540858323856760618370381053542700879322940093340338680438374747

n=81585490521693775199569729271021353600961337409558154408394065314908964693395532611661477878621385157548762972127268182426751366339779291275400606470748998922427734479218355426825279892522225647198562122979291073252041261303445407344720322876988669784628519162341323465395049002638011508834298972829568055843

#m=6071160533955055971743546604364436520513136428184616598264383109697280993124161584420103845881637809766804594215360222990871101274535101403845162298499892152425949186481418116731291457483155649526689300459715250743286772187098702199447879309577598985109748843634075804173259717248137101395761881951859301

#m=6668302614109832977441612809706327902226930713573302462542934012454621324304746547421765225594040537513855520264879943637216043810242025613889966547453989797251245281531865364309075467778347721942839843586635100325719416911032181379090148419425374558357057413858038475805655911676931611751434051165711975

m=6668302614109833115019077285102725105041661215844749231151097966512361792485960736610121629862635656152637512454083537448017426191669257912398021649166272062803687606334127796321178091907287562593636829950788853895079912825287214776553571220705380960320019170740006064238665557032963727233926003781795840

print(len(int_to_bytes(n)))
